
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.websystique.springmvc</groupId>
	<artifactId>S4MVCTiles3App</artifactId>
	<packaging>war</packaging>
	<version>1.0.0</version>
	<name>S4MVCTiles3App</name>






  	<properties>
		<springframework.version>4.2.6.RELEASE</springframework.version>
		<apachetiles.version>3.0.5</apachetiles.version>
		
		
		<!--  This format is used by SonarQube. If you need another format see "buildnumber-maven-plugin" -->

<maven.build.timestamp.format>MM.yyyy</maven.build.timestamp.format>

<yearMonth>${maven.build.timestamp}</yearMonth>    

<!-- ************************-->

<!-- Sonar/Reporting settings -->

<!-- ************************-->

<!-- Sonar/Jacoco integration. Note that these properties need to be defined outside the "coverage" profile

because we want to be to able to execute mvn sonar:sonar without passing a profile -->

<!-- Tells Sonar to use jacoco for coverage results -->

<sonar.projectKey>S4MVCTiles3App</sonar.projectKey>

<sonar.projectName>S4MVCTiles3App</sonar.projectName>

 <sonar.projectVersion>${yearMonth}</sonar.projectVersion>

<sonar.language>java</sonar.language>

<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>

<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>

<!-- Jacoco version to use -->

<jacoco.version>0.7.2.201409121644</jacoco.version>

<!-- The Sonar Jacoco Listener for JUnit to extract coverage details per test -->

<sonar-jacoco-listeners.version>1.4</sonar-jacoco-listeners.version>

<!-- Don't let Sonar execute tests. We will ask it to Maven 'sonar.dynamicAnalysis' is deprecated since version 4.3 and should no longer be used. -->

<!-- <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis> -->

<!-- The system property jacoco.outputDir needs to be override on the command line

    with an absolute path if you want to merge results from all modules.

    Example in a Jenkisn build where ${WORKSPACE} is defined and your project in the root directory of the workspace :

    mvn clean install -Prun-its,coverage -Djacoco.outputDir=${WORKSPACE}/target

    Note that unfortunately using the following does not work because of

    http://jira.codehaus.org/browse/SONAR-3427:

<jacoco.outputDir>${session.executionRootDirectory}/target/</jacoco.outputDir>

-->

<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>

<!-- Jacoco output file for UTs -->

<jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>

<!-- Tells Sonar where the Jacoco coverage result file is located for Unit Tests -->

<sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>

<!-- Jacoco output file for ITs -->

<jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>

<!-- Tells Sonar where the Jacoco coverage result file is located for Integration Tests -->

<sonar.jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.itReportPath>

<!-- <sonar.junit.reportsPath>${project.build.directory}/surefire-reports/</sonar.junit.reportsPath> -->

<!-- <sonar.tests>src/test/java</sonar.tests> -->

<!-- === END of Sonar/Reporting settings === -->
		<profile>
		
		
		
		
		
		
		
		
		</profile>
		
	</properties>

	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${springframework.version}</version>
		</dependency>
		<!-- Apache Tiles -->
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>${apachetiles.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-api</artifactId>
			<version>${apachetiles.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-servlet</artifactId>
			<version>${apachetiles.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>${apachetiles.version}</version>
		</dependency>
		
		<!-- Servlet+JSP+JSTL -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.1</version>
		</dependency>
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>jstl</artifactId>
		    <version>1.2</version>
		</dependency>
		
	</dependencies>






	<build>
		<pluginManagement>
			<plugins>
				<plugin>
			        <groupId>org.apache.maven.plugins</groupId>
			        <artifactId>maven-compiler-plugin</artifactId>
			        <version>3.2</version>
			        <configuration>
			            <source>1.7</source>
			            <target>1.7</target>
			        </configuration>
			    </plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<warSourceDirectory>src/main/webapp</warSourceDirectory>
						<warName>S4MVCTiles3App</warName>
						<failOnMissingWebXml>false</failOnMissingWebXml>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<finalName>S4MVCTiles3App</finalName>
	</build>
</project>